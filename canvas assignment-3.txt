1.Write a function to compute 5/0 and use try/except to catch the exceptions.
ans:def computeDivision(numerator, denominator):
    try:
        result = numerator/denominator
    except ZeroDivisionError as e:
        print(f"error found: {e}")
        result="infinity"
    return result

numerator = 5
denominator = 0
ans = computeDivision(numerator, denominator)
print(f"\nresult of {numerator}/{denominator} = {ans}")
o/p:
error found: division by zero

result of 5/0 = infinity
------------------------------------------------------------------------

Q.2 Implement a Python program to generate all sentences where subject is in ["Americans","Indians"] and verb is in ["Play", "watch"] and the object is in ["Baseball","cricket"].¶
Hint: Subject,Verb and Object should be declared in the program as shown below.
subjects=["Americans ","Indians"]
verbs=["play","watch"]
objects=["Baseball","Cricket"]

Output should come as below:
Americans play Baseball.
Americans play Cricket.
Americans watch Baseball.
Americans watch Cricket.
Indians play Baseball.
Indians play Cricket.
Indians watch Baseball.
Indians watch Cricket.
ans:def sentence_generator(subjects=None, verbs=None, objects=None):
    for sub in subjects:
        for verb in verbs:
            for obj in objects:
                print(f"{sub} {verb} {obj}")
SUBJECT=["Americans","Indians"]
VERB=["play","watch"]
OBJECT=["Baseball","Cricket"]

sentence_generator(subjects=SUBJECT, verbs=VERB, objects=OBJECT)
o/p:Americans play Baseball
Americans play Cricket
Americans watch Baseball
Americans watch Cricket
Indians play Baseball
Indians play Cricket
Indians watch Baseball
Indians watch Cricket
..............................................................................................
Task 2:
1.
Write a function so that the columns of the output matrix are powers of the input vector.
The order of the powers is determined by the increasing boolean argument. Specifically, when
increasing is False, the i-th output column is the input vector raised element-wise to the power
of N - i - 1.
ans:def getVanderMatrix(x, N=None, increasing=False):
    '''Cusomt Vander matrix generator'''

    # default condition if N is not given
    if N is None:
        N = len(x)
        
    matrix = []
    # generating powers for each row based on N value in decreasing order
    # which is a default case
    pows = [(N-i-1) for N,i in zip([N]*N, range(N))]

    # for increaing == True case
    # reverse the pows array 
    if increasing:
        pows = pows[::-1]

    # iterate over x to generate and print each row
    for ele in x:
        row = [ele**pwr for pwr in pows] 
        print(row)
        matrix.append(row)
    return matrix

inputVector = [1,2,3]
no_of_ouput = 3
result = getVanderMatrix(x=inputVector, N=no_of_ouput)
o/p:
[1, 1, 1]
[4, 2, 1]
[9, 3, 1]

inputVector = [1,2,3]
no_of_ouput = 3
result = getVanderMatrix(x=inputVector, N=no_of_ouput, increasing=True)
o/p:
[1, 1, 1]
[1, 2, 4]
[1, 3, 9]

inputVector = [1,2,3]
no_of_ouput = 4
result = getVanderMatrix(x=inputVector, N=no_of_ouput)
o/p:
[1, 1, 1, 1]
[8, 4, 2, 1]
[27, 9, 3, 1]
inputVector = [1,2,3]
no_of_ouput = 4
result = getVanderMatrix(x=inputVector, N=no_of_ouput, increasing=True)
o/p:[1, 1, 1, 1]
[1, 2, 4, 8]
[1, 3, 9, 27]
inputVector = [1,2,3,5]
no_of_ouput = 3
result = getVanderMatrix(x=inputVector, N=no_of_ouput)
o/p:[1, 1, 1]
[4, 2, 1]
[9, 3, 1]
[25, 5, 1]
inputVector = [1,2,3,5]
result = getVanderMatrix(x=inputVector)
o/p:[1, 1, 1, 1]
[8, 4, 2, 1]
[27, 9, 3, 1]
[125, 25, 5, 1]

inputVector = [1,2]
result = getVanderMatrix(x=inputVector)
o/p:[1, 1]
[2, 1]

inputVector = [1,2,3,5]
result = getVanderMatrix(x=inputVector, increasing=True)
o/p:[1, 1, 1, 1]
[1, 2, 4, 8]
[1, 3, 9, 27]
[1, 5, 25, 125]